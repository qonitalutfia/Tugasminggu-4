const responseData = pm.response.json();
const responseTime = 1500;

pm.test("Response status code must be 200", function () {
    pm.response.to.have.status(200);
});

pm.test("Response time is less than 1.5 seconds", function () {
  pm.expect(pm.response.responseTime).to.be.below(responseTime);
});

pm.test("Response must be object", () => {
    pm.expect(responseData).to.be.an('object');
});

pm.test("Response id must be number", () => {
    const { id } = responseData;
    pm.expect(id).to.be.an('number');
});

pm.test("Response title must be string", () => {
    const { title } = responseData;
    pm.expect(title).to.be.an('string');
});

pm.test("Response origin must be string", () => {
    const { origin } = responseData;
    pm.expect(origin).to.be.an('string');
});

pm.test("Response create and update must be string", () => {
    const { created_at, updated_at } = responseData;
    pm.expect(created_at).to.be.an('string');
    pm.expect(updated_at).to.be.an('string');
});

pm.test("Response owner must be number", () => {
    const { owner } = responseData;
    pm.expect(owner).to.be.an('number');
});

pm.test("Response must be have header content-type is application/json", () => {
    pm.expect(pm.response.headers.get('Content-Type')).to.be.equal("application/json");
});

pm.test("Response status code is 200", function () {
    pm.response.to.have.status(200);
});


pm.test("Response time is less than 1.5 seconds", function () {
  pm.expect(pm.response.responseTime).to.be.below(1500);
});


pm.test("Response must be an object", function () {
    pm.expect(pm.response.json()).to.be.an('object');
});


pm.test("Response has the required fields", function () {
    const responseData = pm.response.json();
    
    pm.expect(responseData).to.be.an('object');
    pm.expect(responseData).to.have.property('id');
    pm.expect(responseData).to.have.property('title');
    pm.expect(responseData).to.have.property('origin');
    pm.expect(responseData).to.have.property('created_at');
    pm.expect(responseData).to.have.property('updated_at');
    pm.expect(responseData).to.have.property('owner');
});


pm.test("Id is a non-negative number", function () {
    const responseData = pm.response.json();
    
    pm.expect(responseData.id).to.be.a('number').and.to.be.at.least(0);
});

